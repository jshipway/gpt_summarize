<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>My CAS Server Application</title>
    <meta name="description" content="A simple HTML file which interacts with CAS Server">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>
    <script src="https://cdn.developer.sas.com/packages/sas-auth-browser/latest/dist/index.js"></script>

</head>

<body onload="authenticate()">
    <div id="App"></div>
    <script>
        // Define the application layout
        const App = () => {
            const html = `
                <nav class="navbar bg-primary">
                    <span class="navbar-brand m-2 h1 text-light" href="#">My CAS Server Application</span>
                    <span class="navbar-text m-2 text-light" id="userId"></span>
                </nav>
                <div id="authentication"></div>
                <nav id="selector" class="mx-2 navbar">
                    <span>
                        <label for="libraries">Choose a CAS library : </label>
                        <select id="libraries"name="libraries" style="width:300px;"></select>
                        <label for="tables">Choose a CAS table : </label>
                        <select id="tables" name="tables" style="width:300px;"></select>
                        <button id="summarize" disabled type="button" class="btn btn-primary mx-2" data-bs-toggle="modal" data-bs-target="#selectionModal">Calculate Frequency</button>
                    </span>
                    <span>
                        <button disabled class="btn btn-secondary mx-1" width="20px" id="previousPage">-</button>
                        <input disabled value="1" id="page" size="3" style="text-align:center;" >
                        <button disabled class="btn btn-secondary mx-1" width="20px" id="nextPage">+</button>
                    </span>
                </nav>
                <div id="spinner" class="d-flex justify-content-center d-none">
                    <div class="spinner-border text-primary" role="status"></div>
                </div>
                <div id="output">
                    <table class="table">
                        <thead id="tableHeader"></thead>
                        <tbody id="tableBody"></tbody>
                    </table>
                </div>
                <div class="modal fade" id="selectionModal" tabindex="-1">
                    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                        <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Select group-by variables</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div id="modalBody" class="modal-body">
                            <div class="container">
                                <div class="row">
                                    <div class="col-5 bg-primary text-white p-1 text-center"><span>Available variables</span></div>
                                    <div class="col-2"></div>
                                    <div class="col-5 bg-primary text-white p-1 text-center"><span>Selected variables</span></div>
                                </div>
                                    <div id="variableSelector" class="row">
                                    <div id="availableVariables" class="col-5 p-1 overflow-auto"></div>
                                    <div class="col-2"></div>
                                    <div id="selectedVariables" class="col-5 p-1 overflow-auto"></div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="generateFrequency">Generate Frequency table</button>
                        </div>
                        </div>
                    </div>
                </div>
            `
            return html
        }
        // Write the App content to App div
        document.getElementById("App").innerHTML = App()
        // Define the state of the application
        App.state = {
            "baseUrl": "https://viya4.frasep.sas.com",
            "isAuthenticated": false,
            "casSessionId": null,
            "selectedLibrary": null,
            "selectedTable": null,
            "page": 1,
            "pageSize": 20
        }
        // Function to authenticate user
        const authenticate = async () => {
            const instance = sasAuthBrowser.createCookieAuthenticationCredential({ url: App.state.baseUrl })
            instance.checkAuthenticated()
                .then(
                    () => {
                        console.log("User already authenticated")
                        // Store authentication status
                        App.state = { ...App.state, isAuthenticated: true }
                        return
                    },
                    () => instance.loginPopup().then(
                        () => {
                            console.log("User is authenticated")
                            // Store authentication status
                            App.state = { ...App.state, isAuthenticated: true }
                            return
                        },
                        () => {
                            console.log(("Authentication failed"))
                            // Store authentication status
                            App.state = { ...App.state, isAuthenticated: false }
                            return
                        }
                    )
                )
                .then(() => {
                    // Define an event to trigger other actions when the user is authenticated
                    const event = new Event("authentication")
                    document.getElementById("App").dispatchEvent(event)
                })
        }
        // Function to display a spinner while loading
        const loading = (status, target) => {
            if (status) {
                // Show spinner
                document.getElementById(target).classList.remove("d-none")
            } else {
                // Hide spinner
                document.getElementById(target).classList.add("d-none")
            }
        }
        // Function to collect user information
        const getUserInfo = async () => {
            const endpoint = "/identities/users/@currentUser"
            const url = App.state.baseUrl + endpoint
            const response = await fetch(url, { credentials: "include" })
                .then(response => response.json())
            return response
        }
        // Function to start a CAS session
        const startCasSession = async () => {
            const endpoint = "/cas-shared-default-http/cas/sessions"
            const url = App.state.baseUrl + endpoint
            await fetch(url, { method: "POST", credentials: "include" })
                .then(response => response.json())
                .then(json => {
                    // Store the CAS session ID
                    App.state = { ...App.state, casSessionId: json.session }
                    // Define an event to trigger other actions
                    const event = new Event("session")
                    document.getElementById("App").dispatchEvent(event)
                    console.log("CAS Server session started")
                    return
                })
        }
        // Function to retrieve a list of CAS libraries
        const getLibraries = async () => {
            const endpoint = `/cas-shared-default-http/cas/sessions/${App.state.casSessionId}/actions/table.caslibInfo`
            const url = App.state.baseUrl + endpoint
            const libraries = await fetch(url, { method: "POST", credentials: "include" }).then(response => response.json())
            return libraries.results.CASLibInfo
        }
        // Generate Select options and populate the selection box
        const generateOptions = (data, target) => {
            const options = data.rows.map(option => `<option value="${option[0]}">${option[0].toUpperCase()}</option>`)
            let html = "<option disabled selected>Select an option</option>"
            html += options.join("")
            // Populate the target HTML element
            document.getElementById(target).innerHTML = html
        }
        // Function to retrieve a list of tables
        const getTables = async () => {
            const endpoint = `/cas-shared-default-http/cas/sessions/${App.state.casSessionId}/actions/table.tableInfo`
            const url = App.state.baseUrl + endpoint
            const data = { "caslib": App.state.selectedLibrary }
            const headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }
            const tables = await fetch(url, { method: "POST", body: JSON.stringify(data), headers: headers, credentials: "include" })
                .then(response => response.json())
            return tables.results.TableInfo
        }
        // Function to extract data from a table
        const fetchData = async () => {
            const endpoint = `/cas-shared-default-http/cas/sessions/${App.state.casSessionId}/actions/table.fetch`
            const url = App.state.baseUrl + endpoint
            const data = {
                "table": {
                    "caslib": App.state.selectedLibrary,
                    "name": App.state.selectedTable
                },
                "from": (App.state.page * App.state.pageSize) - (App.state.pageSize - 1),
                "to": App.state.page * App.state.pageSize
            }
            const headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }
            const table = await fetch(url, { method: "POST", body: JSON.stringify(data), headers: headers, credentials: "include" })
                .then(response => response.json())
            return table.results.Fetch
        }
        // Function to handle selection in modal
        const handleSelectionModal = (event) => {
            const selectedDiv = event.currentTarget
            if (selectedDiv.parentElement.id === "availableVariables") {
                document.getElementById("selectedVariables").appendChild(selectedDiv)
            } else {
                document.getElementById("availableVariables").appendChild(selectedDiv)
            }
        }
        // Function to drop the frequency table if it exists
        const dropTable = async (caslib, table) => {
            const endpoint = `/cas-shared-default-http/cas/sessions/${App.state.casSessionId}/actions/table.dropTable`
            const url = App.state.baseUrl + endpoint
            const data = { "caslib": caslib, "name": table, quiet: true }
            const headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }
            const status = await fetch(url, { method: "POST", headers: headers, body: JSON.stringify(data), credentials: "include" })
                .then(response => response.json())
            return status
        }
        // Generate frequency table
        const executeFrequency = async (selection) => {
            // Display the spinner while retrieving the libraries list
            loading(true, "spinner")
            const endpoint = `/cas-shared-default-http/cas/sessions/${App.state.casSessionId}/actions/simple.freq`
            const url = App.state.baseUrl + endpoint
            const outputLib = "CASUSER"
            const outputTable = App.state.selectedTable + "#Frequency"
            const data = {
                "table": { "caslib": App.state.selectedLibrary, "name": App.state.selectedTable },
                "casout": { "caslib": outputLib, "name": outputTable, "promote": true },
                "inputs": selection
            }
            const headers = {
                "accept": "application/json",
                "content-type": "application/json"
            }
            // Delete output table if exists
            const tableDeletion = await dropTable(outputLib, outputTable)
            if (tableDeletion.status === 0) {
                const table = await fetch(url, { method: "POST", body: JSON.stringify(data), headers: headers, credentials: "include" })
                    .then(response => response.json())
                if (table.status === 0) {
                    // Handle the switch to the generated table
                    const librarySelector = document.getElementById("libraries")
                    librarySelector.value = `CASUSER(${App.state.userInfo.id})`
                    // Trigger the event to refresh the table list
                    const event = new Event("change")
                    librarySelector.dispatchEvent(event)
                    // Wait for table list to be refreshed and set the selected table to the newly generated table
                    setTimeout(() => {
                        if (!App.state.loading) {
                            const tableSelector = document.getElementById("tables")
                            tableSelector.value = outputTable.toUpperCase()
                            // Trigger the event to refresh the table
                            tableSelector.dispatchEvent(event)
                            // End the recursion
                            clearTimeout()
                        }
                    }, 1000)
                }
            }
        }
        // Generate Table header
        const generateTableHeader = (data, target) => {
            const columns = data.map(column => `<th>${column.label ? column.label : column.name}</th>`)
            // Populate the target HTML element
            document.getElementById(target).innerHTML = columns.join("")
        }
        // Generate Table body
        const generateTableBody = (data, target) => {
            const rows = data.map(row => {
                const cells = row.map(cell => `<td>${cell}</td>`)
                return `<tr>${cells.join("")}</tr>`
            })
            // Populate the target HTML element
            document.getElementById(target).innerHTML = rows.join("")
        }

        // Define an event listener for authentication event
        document.getElementById("App").addEventListener("authentication", () => {
            if (App.state.isAuthenticated) {
                // Retrieve user information
                // Display the user name in the application bar
                getUserInfo().then(response => {
                    App.state = { ...App.state, userInfo: response }
                    // Write the user name in the defined HTML div
                    document.getElementById("userId").innerHTML = response.name
                })
                // Display the spinner while starting the compute server session
                loading(true, "spinner")
                // Start a compute server session
                // Hide the spinner when done
                startCasSession().then(() => loading(false, "spinner"))

            } else {
                // Delete user information if user is not authenticated
                App.state = { ...App.state, userInfo: null }
                document.getElementById("userId").innerHTML = null
            }
        })
        // Define an even listener for session event
        document.getElementById("App").addEventListener("session", () => {
            // Display the spinner while retrieving the libraries list
            loading(true, "spinner")
            // Retrieve libraries list
            // Generate the options for libraries div
            // Hide the spinner
            getLibraries().then(data => {
                generateOptions(data, "libraries")
                loading(false, "spinner")
            })
        })
        // Define an event listener for library selection
        document.getElementById("libraries").addEventListener("change", (event) => {
            // Handle state when a library is selected
            App.state = {
                ...App.state,
                selectedLibrary: event.currentTarget.value,
                selectedTable: null
            }
            // Display the spinner while retrieving the tables list
            loading(true, "spinner")
            // Retrieve tables list
            // Generate the options for tables div
            // Hide the spinner
            getTables(event.currentTarget.value).then(data => {
                generateOptions(data, "tables")
                loading(false, "spinner")
            })
            // Empty the table if no table is selected
            if (App.state.selectedTable === null) {
                document.getElementById("tableHeader").innerHTML = null
                document.getElementById("tableBody").innerHTML = null
            }
        })
        // Define an event listener for table selection
        document.getElementById("tables").addEventListener("change", async (event) => {
            // Handle state when a table is selected
            App.state = {
                ...App.state,
                selectedTable: event.currentTarget.value,
                page: 1
            }
            // Display the spinner while generating the table
            loading(true, "spinner")
            // Retrieve data
            // Hide the spinner
            // Generate table header
            // Generate table body
            await fetchData().then(data => {
                loading(false, "spinner")
                App.state = { ...App.state, columns: data.schema }
                generateTableHeader(data.schema, "tableHeader")
                generateTableBody(data.rows, "tableBody")
            })
            document.getElementById("summarize").disabled = false
            document.getElementById("previousPage").disabled = false
            document.getElementById("nextPage").disabled = false
            document.getElementById("page").value = App.state.page
        })
        // Define an event listener when modal opens
        document.getElementById("selectionModal").addEventListener("show.bs.modal", (event) => {
            // Empty the variable selection boxes
            document.getElementById("selectedVariables").innerHTML = null
            document.getElementById("availableVariables").innerHTML = null
            const elements = App.state.columns.map((column, index) => {
                if (column.type === "string") {
                    const node = document.createElement('div')
                    node.setAttribute("data-columnName", column.name)
                    const newContent = document.createTextNode(column.label ? column.label : column.name)
                    node.appendChild(newContent)
                    node.onclick = handleSelectionModal
                    document.getElementById("availableVariables").appendChild(node)
                }
            })
        })
        // Define an event listener to generate frequency table
        document.getElementById("generateFrequency").addEventListener("click", () => {
            const children = document.getElementById("selectedVariables").childNodes
            const selection = Array.from(children).map(child => child.getAttribute("data-columnName"))
            executeFrequency(selection)
        })
        // Define an event listener to go to previous page
        document.getElementById("previousPage").addEventListener("click", async () => {
            document.getElementById("summarize").disabled = true
            if (App.state.page > 1) {
                App.state = { ...App.state, page: App.state.page - 1 }
                // Display the spinner while generating the table
                loading(true, "spinner")
                // Retrieve columns and rows
                // Hide the spinner
                // Generate table body
                await fetchData().then(data => {
                    loading(false, "spinner")
                    if (data.rows.length > 0) {
                        generateTableBody(data.rows, "tableBody")
                    }
                })
            } else {
                App.state = { ...App.state, page: 1 }
            }
            document.getElementById("page").value = App.state.page
            document.getElementById("summarize").disabled = false
        })
        // Define an event listener to go to next page
        document.getElementById("nextPage").addEventListener("click", async () => {
            document.getElementById("summarize").disabled = true
            App.state = { ...App.state, page: App.state.page + 1 }
            // Display the spinner while generating the table
            loading(true, "spinner")
            // Retrieve columns and rows
            // Hide the spinner
            // Generate table body
            await fetchData().then(data => {
                loading(false, "spinner")
                if (data.rows.length > 0) {
                    generateTableBody(data.rows, "tableBody")
                    console.log(App.state.page)
                } else {
                    App.state = { ...App.state, page: App.state.page - 1 }
                }
                document.getElementById("page").value = App.state.page
            })
            document.getElementById("summarize").disabled = false
        })
    </script>

</body>